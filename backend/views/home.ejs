const express = require('express');
const { Issuer } = require('openid-client');
const session = require('express-session');
const path = require('path');
const app = express();

// Configurar EJS como motor de vistas
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));

// Servir archivos estáticos (como imágenes, si las tienes)
app.use('/images', express.static(path.join(__dirname, 'views/images')));

// Configurar sesiones para rastrear la autenticación
app.use(session({
    secret: 'tu_secreto_aqui', // Cambia esto por un secreto seguro
    resave: false,
    saveUninitialized: true,
    cookie: { secure: false } // En producción, usa true con HTTPS
}));

// Configuración de Cognito (reemplaza con tus valores reales)
const clientId = '4jmcmm89ocil96840h63pb36ph'; // Tu Client ID de Cognito
const clientSecret = 'TU_CLIENT_SECRET'; // Reemplaza con el secreto de tu App Client
const redirectUri = 'http://localhost:3001/callback';
const userPoolId = 'us-east-1_abc123def'; // Reemplaza con tu User Pool ID

// Función para inicializar el cliente de Cognito
async function initializeCognitoClient() {
    try {
        const cognitoIssuer = await Issuer.discover(`https://cognito-idp.us-east-1.amazonaws.com/${userPoolId}`);
        const client = new cognitoIssuer.Client({
            client_id: clientId,
            client_secret: clientSecret,
            redirect_uris: [redirectUri],
            response_types: ['code']
        });
        return client;
    } catch (error) {
        console.error('Error al inicializar el cliente de Cognito:', error);
        throw error;
    }
}

// Ruta para iniciar sesión (redirige a Cognito)
app.get('/login', async (req, res) => {
    try {
        const client = await initializeCognitoClient();
        const authUrl = client.authorizationUrl({
            scope: 'openid email profile', // Scopes para obtener datos del usuario
            response_type: 'code',
            redirect_uri: redirectUri,
            lang: 'es' // Interfaz en español
        });
        res.redirect(authUrl);
    } catch (error) {
        res.status(500).send('Error al redirigir a Cognito');
    }
});

// Ruta para procesar el callback de Cognito
app.get('/callback', async (req, res) => {
    try {
        const client = await initializeCognitoClient();
        const params = client.callbackParams(req);
        const tokenSet = await client.callback(redirectUri, params);

        // Guardar tokens y datos del usuario en la sesión
        req.session.tokenSet = tokenSet;
        req.session.user = tokenSet.claims();

        // Redirigir a /home
        res.redirect('/home');
    } catch (error) {
        console.error('Error en el callback de Cognito:', error);
        res.redirect('/login');
    }
});

// Ruta para la página principal (/home)
app.get('/home', (req, res) => {
    if (req.session.tokenSet) {
        const userInfo = req.session.user;
        res.render('home', {
            isAuthenticated: true,
            userInfo: {
                username: userInfo.preferred_username || userInfo.sub,
                email: userInfo.email
            }
        });
    } else {
        res.render('home', {
            isAuthenticated: false,
            userInfo: {}
        });
    }
});

// Ruta para cerrar sesión
app.get('/logout', (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error('Error al cerrar sesión:', err);
        }
        res.redirect('/home');
    });
});

// Iniciar el servidor
app.listen(3001, () => {
    console.log('Servidor corriendo en http://localhost:3001');
});